package com.osahft.api.internal.assertion;

import com.osahft.api.model.SoftwareVersionInformation;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link SoftwareVersionInformation} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractSoftwareVersionInformationAssert<S extends AbstractSoftwareVersionInformationAssert<S, A>, A extends SoftwareVersionInformation> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractSoftwareVersionInformationAssert}</code> to make assertions on actual SoftwareVersionInformation.
     *
     * @param actual the SoftwareVersionInformation we want to make assertions on.
     */
    protected AbstractSoftwareVersionInformationAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual SoftwareVersionInformation's buildDate is equal to the given one.
     *
     * @param buildDate the given buildDate to compare the actual SoftwareVersionInformation's buildDate to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SoftwareVersionInformation's buildDate is not equal to the given one.
     */
    public S hasBuildDate(java.time.Instant buildDate) {
        // check that actual SoftwareVersionInformation we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting buildDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        java.time.Instant actualBuildDate = actual.getBuildDate();
        if (!Objects.areEqual(actualBuildDate, buildDate)) {
            failWithMessage(assertjErrorMessage, actual, buildDate, actualBuildDate);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SoftwareVersionInformation's restApiVersion is equal to the given one.
     *
     * @param restApiVersion the given restApiVersion to compare the actual SoftwareVersionInformation's restApiVersion to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SoftwareVersionInformation's restApiVersion is not equal to the given one.
     */
    public S hasRestApiVersion(String restApiVersion) {
        // check that actual SoftwareVersionInformation we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting restApiVersion of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualRestApiVersion = actual.getRestApiVersion();
        if (!Objects.areEqual(actualRestApiVersion, restApiVersion)) {
            failWithMessage(assertjErrorMessage, actual, restApiVersion, actualRestApiVersion);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
