package com.osahft.api.internal.assertion;

import com.osahft.api.model.CreateMailTransferRequest;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link CreateMailTransferRequest} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractCreateMailTransferRequestAssert<S extends AbstractCreateMailTransferRequestAssert<S, A>, A extends CreateMailTransferRequest> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractCreateMailTransferRequestAssert}</code> to make assertions on actual CreateMailTransferRequest.
     *
     * @param actual the CreateMailTransferRequest we want to make assertions on.
     */
    protected AbstractCreateMailTransferRequestAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual CreateMailTransferRequest's mailReceivers contains the given String elements.
     *
     * @param mailReceivers the given elements that should be contained in actual CreateMailTransferRequest's mailReceivers.
     * @return this assertion object.
     * @throws AssertionError if the actual CreateMailTransferRequest's mailReceivers does not contain all given String elements.
     */
    public S hasMailReceivers(String... mailReceivers) {
        // check that actual CreateMailTransferRequest we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (mailReceivers == null) failWithMessage("Expecting mailReceivers parameter not to be null.");

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getMailReceivers(), mailReceivers);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CreateMailTransferRequest's mailReceivers contains the given String elements in Collection.
     *
     * @param mailReceivers the given elements that should be contained in actual CreateMailTransferRequest's mailReceivers.
     * @return this assertion object.
     * @throws AssertionError if the actual CreateMailTransferRequest's mailReceivers does not contain all given String elements.
     */
    public S hasMailReceivers(java.util.Collection<? extends String> mailReceivers) {
        // check that actual CreateMailTransferRequest we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (mailReceivers == null) {
            failWithMessage("Expecting mailReceivers parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getMailReceivers(), mailReceivers.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CreateMailTransferRequest's mailReceivers contains <b>only</b> the given String elements and nothing else in whatever order.
     *
     * @param mailReceivers the given elements that should be contained in actual CreateMailTransferRequest's mailReceivers.
     * @return this assertion object.
     * @throws AssertionError if the actual CreateMailTransferRequest's mailReceivers does not contain all given String elements.
     */
    public S hasOnlyMailReceivers(String... mailReceivers) {
        // check that actual CreateMailTransferRequest we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (mailReceivers == null) failWithMessage("Expecting mailReceivers parameter not to be null.");

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getMailReceivers(), mailReceivers);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CreateMailTransferRequest's mailReceivers contains <b>only</b> the given String elements in Collection and nothing else in whatever order.
     *
     * @param mailReceivers the given elements that should be contained in actual CreateMailTransferRequest's mailReceivers.
     * @return this assertion object.
     * @throws AssertionError if the actual CreateMailTransferRequest's mailReceivers does not contain all given String elements.
     */
    public S hasOnlyMailReceivers(java.util.Collection<? extends String> mailReceivers) {
        // check that actual CreateMailTransferRequest we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (mailReceivers == null) {
            failWithMessage("Expecting mailReceivers parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getMailReceivers(), mailReceivers.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CreateMailTransferRequest's mailReceivers does not contain the given String elements.
     *
     * @param mailReceivers the given elements that should not be in actual CreateMailTransferRequest's mailReceivers.
     * @return this assertion object.
     * @throws AssertionError if the actual CreateMailTransferRequest's mailReceivers contains any given String elements.
     */
    public S doesNotHaveMailReceivers(String... mailReceivers) {
        // check that actual CreateMailTransferRequest we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (mailReceivers == null) failWithMessage("Expecting mailReceivers parameter not to be null.");

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getMailReceivers(), mailReceivers);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CreateMailTransferRequest's mailReceivers does not contain the given String elements in Collection.
     *
     * @param mailReceivers the given elements that should not be in actual CreateMailTransferRequest's mailReceivers.
     * @return this assertion object.
     * @throws AssertionError if the actual CreateMailTransferRequest's mailReceivers contains any given String elements.
     */
    public S doesNotHaveMailReceivers(java.util.Collection<? extends String> mailReceivers) {
        // check that actual CreateMailTransferRequest we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (mailReceivers == null) {
            failWithMessage("Expecting mailReceivers parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getMailReceivers(), mailReceivers.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CreateMailTransferRequest has no mailReceivers.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual CreateMailTransferRequest's mailReceivers is not empty.
     */
    public S hasNoMailReceivers() {
        // check that actual CreateMailTransferRequest we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have mailReceivers but had :\n  <%s>";

        // check
        if (actual.getMailReceivers().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getMailReceivers());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual CreateMailTransferRequest's mailSender is equal to the given one.
     *
     * @param mailSender the given mailSender to compare the actual CreateMailTransferRequest's mailSender to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CreateMailTransferRequest's mailSender is not equal to the given one.
     */
    public S hasMailSender(String mailSender) {
        // check that actual CreateMailTransferRequest we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting mailSender of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualMailSender = actual.getMailSender();
        if (!Objects.areEqual(actualMailSender, mailSender)) {
            failWithMessage(assertjErrorMessage, actual, mailSender, actualMailSender);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CreateMailTransferRequest's message is equal to the given one.
     *
     * @param message the given message to compare the actual CreateMailTransferRequest's message to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CreateMailTransferRequest's message is not equal to the given one.
     */
    public S hasMessage(String message) {
        // check that actual CreateMailTransferRequest we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting message of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualMessage = actual.getMessage();
        if (!Objects.areEqual(actualMessage, message)) {
            failWithMessage(assertjErrorMessage, actual, message, actualMessage);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CreateMailTransferRequest's title is equal to the given one.
     *
     * @param title the given title to compare the actual CreateMailTransferRequest's title to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CreateMailTransferRequest's title is not equal to the given one.
     */
    public S hasTitle(String title) {
        // check that actual CreateMailTransferRequest we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualTitle = actual.getTitle();
        if (!Objects.areEqual(actualTitle, title)) {
            failWithMessage(assertjErrorMessage, actual, title, actualTitle);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
