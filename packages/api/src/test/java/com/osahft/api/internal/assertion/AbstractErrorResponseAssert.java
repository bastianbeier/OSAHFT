package com.osahft.api.internal.assertion;

import com.osahft.api.model.ErrorResponse;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link ErrorResponse} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractErrorResponseAssert<S extends AbstractErrorResponseAssert<S, A>, A extends ErrorResponse> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractErrorResponseAssert}</code> to make assertions on actual ErrorResponse.
     *
     * @param actual the ErrorResponse we want to make assertions on.
     */
    protected AbstractErrorResponseAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual ErrorResponse's code is equal to the given one.
     *
     * @param code the given code to compare the actual ErrorResponse's code to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ErrorResponse's code is not equal to the given one.
     */
    public S hasCode(String code) {
        // check that actual ErrorResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting code of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualCode = actual.getCode();
        if (!Objects.areEqual(actualCode, code)) {
            failWithMessage(assertjErrorMessage, actual, code, actualCode);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual ErrorResponse's httpStatus is equal to the given one.
     *
     * @param httpStatus the given httpStatus to compare the actual ErrorResponse's httpStatus to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ErrorResponse's httpStatus is not equal to the given one.
     */
    public S hasHttpStatus(org.springframework.http.HttpStatus httpStatus) {
        // check that actual ErrorResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting httpStatus of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        org.springframework.http.HttpStatus actualHttpStatus = actual.getHttpStatus();
        if (!Objects.areEqual(actualHttpStatus, httpStatus)) {
            failWithMessage(assertjErrorMessage, actual, httpStatus, actualHttpStatus);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual ErrorResponse's message is equal to the given one.
     *
     * @param message the given message to compare the actual ErrorResponse's message to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ErrorResponse's message is not equal to the given one.
     */
    public S hasMessage(String message) {
        // check that actual ErrorResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting message of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualMessage = actual.getMessage();
        if (!Objects.areEqual(actualMessage, message)) {
            failWithMessage(assertjErrorMessage, actual, message, actualMessage);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
