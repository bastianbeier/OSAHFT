package com.osahft.api.internal.assertion;

import com.osahft.api.document.MailReceiverDownloadLinkMapping;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link MailReceiverDownloadLinkMapping} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractMailReceiverDownloadLinkMappingAssert<S extends AbstractMailReceiverDownloadLinkMappingAssert<S, A>, A extends MailReceiverDownloadLinkMapping> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractMailReceiverDownloadLinkMappingAssert}</code> to make assertions on actual MailReceiverDownloadLinkMapping.
     *
     * @param actual the MailReceiverDownloadLinkMapping we want to make assertions on.
     */
    protected AbstractMailReceiverDownloadLinkMappingAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual MailReceiverDownloadLinkMapping's downloadLink is equal to the given one.
     *
     * @param downloadLink the given downloadLink to compare the actual MailReceiverDownloadLinkMapping's downloadLink to.
     * @return this assertion object.
     * @throws AssertionError - if the actual MailReceiverDownloadLinkMapping's downloadLink is not equal to the given one.
     */
    public S hasDownloadLink(String downloadLink) {
        // check that actual MailReceiverDownloadLinkMapping we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting downloadLink of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDownloadLink = actual.getDownloadLink();
        if (!Objects.areEqual(actualDownloadLink, downloadLink)) {
            failWithMessage(assertjErrorMessage, actual, downloadLink, actualDownloadLink);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual MailReceiverDownloadLinkMapping's downloadLinkId is equal to the given one.
     *
     * @param downloadLinkId the given downloadLinkId to compare the actual MailReceiverDownloadLinkMapping's downloadLinkId to.
     * @return this assertion object.
     * @throws AssertionError - if the actual MailReceiverDownloadLinkMapping's downloadLinkId is not equal to the given one.
     */
    public S hasDownloadLinkId(Long downloadLinkId) {
        // check that actual MailReceiverDownloadLinkMapping we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting downloadLinkId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Long actualDownloadLinkId = actual.getDownloadLinkId();
        if (!Objects.areEqual(actualDownloadLinkId, downloadLinkId)) {
            failWithMessage(assertjErrorMessage, actual, downloadLinkId, actualDownloadLinkId);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual MailReceiverDownloadLinkMapping's mailReceiver is equal to the given one.
     *
     * @param mailReceiver the given mailReceiver to compare the actual MailReceiverDownloadLinkMapping's mailReceiver to.
     * @return this assertion object.
     * @throws AssertionError - if the actual MailReceiverDownloadLinkMapping's mailReceiver is not equal to the given one.
     */
    public S hasMailReceiver(String mailReceiver) {
        // check that actual MailReceiverDownloadLinkMapping we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting mailReceiver of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualMailReceiver = actual.getMailReceiver();
        if (!Objects.areEqual(actualMailReceiver, mailReceiver)) {
            failWithMessage(assertjErrorMessage, actual, mailReceiver, actualMailReceiver);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
