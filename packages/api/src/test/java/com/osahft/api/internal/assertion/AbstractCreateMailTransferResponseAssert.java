package com.osahft.api.internal.assertion;

import com.osahft.api.model.CreateMailTransferResponse;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link CreateMailTransferResponse} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractCreateMailTransferResponseAssert<S extends AbstractCreateMailTransferResponseAssert<S, A>, A extends CreateMailTransferResponse> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractCreateMailTransferResponseAssert}</code> to make assertions on actual CreateMailTransferResponse.
     *
     * @param actual the CreateMailTransferResponse we want to make assertions on.
     */
    protected AbstractCreateMailTransferResponseAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual CreateMailTransferResponse's mailTransferId is equal to the given one.
     *
     * @param mailTransferId the given mailTransferId to compare the actual CreateMailTransferResponse's mailTransferId to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CreateMailTransferResponse's mailTransferId is not equal to the given one.
     */
    public S hasMailTransferId(String mailTransferId) {
        // check that actual CreateMailTransferResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting mailTransferId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualMailTransferId = actual.getMailTransferId();
        if (!Objects.areEqual(actualMailTransferId, mailTransferId)) {
            failWithMessage(assertjErrorMessage, actual, mailTransferId, actualMailTransferId);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
