package com.osahft.api.internal.assertion;

import com.osahft.api.document.MailReceiverDownloadLinkMapping;
import com.osahft.api.document.MailTransfer;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link MailTransfer} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractMailTransferAssert<S extends AbstractMailTransferAssert<S, A>, A extends MailTransfer> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractMailTransferAssert}</code> to make assertions on actual MailTransfer.
     *
     * @param actual the MailTransfer we want to make assertions on.
     */
    protected AbstractMailTransferAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual MailTransfer's authenticationAttempts is equal to the given one.
     *
     * @param authenticationAttempts the given authenticationAttempts to compare the actual MailTransfer's authenticationAttempts to.
     * @return this assertion object.
     * @throws AssertionError - if the actual MailTransfer's authenticationAttempts is not equal to the given one.
     */
    public S hasAuthenticationAttempts(int authenticationAttempts) {
        // check that actual MailTransfer we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting authenticationAttempts of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualAuthenticationAttempts = actual.getAuthenticationAttempts();
        if (actualAuthenticationAttempts != authenticationAttempts) {
            failWithMessage(assertjErrorMessage, actual, authenticationAttempts, actualAuthenticationAttempts);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual MailTransfer's authenticationCode is equal to the given one.
     *
     * @param authenticationCode the given authenticationCode to compare the actual MailTransfer's authenticationCode to.
     * @return this assertion object.
     * @throws AssertionError - if the actual MailTransfer's authenticationCode is not equal to the given one.
     */
    public S hasAuthenticationCode(Integer authenticationCode) {
        // check that actual MailTransfer we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting authenticationCode of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualAuthenticationCode = actual.getAuthenticationCode();
        if (!Objects.areEqual(actualAuthenticationCode, authenticationCode)) {
            failWithMessage(assertjErrorMessage, actual, authenticationCode, actualAuthenticationCode);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual MailTransfer is authorized.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual MailTransfer is not authorized.
     */
    public S isAuthorized() {
        // check that actual MailTransfer we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isAuthorized()) {
            failWithMessage("\nExpecting that actual MailTransfer is authorized but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual MailTransfer is not authorized.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual MailTransfer is authorized.
     */
    public S isNotAuthorized() {
        // check that actual MailTransfer we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isAuthorized()) {
            failWithMessage("\nExpecting that actual MailTransfer is not authorized but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual MailTransfer's containerId is equal to the given one.
     *
     * @param containerId the given containerId to compare the actual MailTransfer's containerId to.
     * @return this assertion object.
     * @throws AssertionError - if the actual MailTransfer's containerId is not equal to the given one.
     */
    public S hasContainerId(Long containerId) {
        // check that actual MailTransfer we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting containerId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Long actualContainerId = actual.getContainerId();
        if (!Objects.areEqual(actualContainerId, containerId)) {
            failWithMessage(assertjErrorMessage, actual, containerId, actualContainerId);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual MailTransfer's createdAt is equal to the given one.
     *
     * @param createdAt the given createdAt to compare the actual MailTransfer's createdAt to.
     * @return this assertion object.
     * @throws AssertionError - if the actual MailTransfer's createdAt is not equal to the given one.
     */
    public S hasCreatedAt(java.util.Date createdAt) {
        // check that actual MailTransfer we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting createdAt of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        java.util.Date actualCreatedAt = actual.getCreatedAt();
        if (!Objects.areEqual(actualCreatedAt, createdAt)) {
            failWithMessage(assertjErrorMessage, actual, createdAt, actualCreatedAt);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual MailTransfer's dataDir is equal to the given one.
     *
     * @param dataDir the given dataDir to compare the actual MailTransfer's dataDir to.
     * @return this assertion object.
     * @throws AssertionError - if the actual MailTransfer's dataDir is not equal to the given one.
     */
    public S hasDataDir(String dataDir) {
        // check that actual MailTransfer we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting dataDir of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDataDir = actual.getDataDir();
        if (!Objects.areEqual(actualDataDir, dataDir)) {
            failWithMessage(assertjErrorMessage, actual, dataDir, actualDataDir);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual MailTransfer's id is equal to the given one.
     *
     * @param id the given id to compare the actual MailTransfer's id to.
     * @return this assertion object.
     * @throws AssertionError - if the actual MailTransfer's id is not equal to the given one.
     */
    public S hasId(String id) {
        // check that actual MailTransfer we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualId = actual.getId();
        if (!Objects.areEqual(actualId, id)) {
            failWithMessage(assertjErrorMessage, actual, id, actualId);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual MailTransfer's mailReceiverDownloadLinkMapping contains the given MailReceiverDownloadLinkMapping elements.
     *
     * @param mailReceiverDownloadLinkMapping the given elements that should be contained in actual MailTransfer's mailReceiverDownloadLinkMapping.
     * @return this assertion object.
     * @throws AssertionError if the actual MailTransfer's mailReceiverDownloadLinkMapping does not contain all given MailReceiverDownloadLinkMapping elements.
     */
    public S hasMailReceiverDownloadLinkMapping(MailReceiverDownloadLinkMapping... mailReceiverDownloadLinkMapping) {
        // check that actual MailTransfer we want to make assertions on is not null.
        isNotNull();

        // check that given MailReceiverDownloadLinkMapping varargs is not null.
        if (mailReceiverDownloadLinkMapping == null)
            failWithMessage("Expecting mailReceiverDownloadLinkMapping parameter not to be null.");

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getMailReceiverDownloadLinkMapping(), mailReceiverDownloadLinkMapping);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual MailTransfer's mailReceiverDownloadLinkMapping contains the given MailReceiverDownloadLinkMapping elements in Collection.
     *
     * @param mailReceiverDownloadLinkMapping the given elements that should be contained in actual MailTransfer's mailReceiverDownloadLinkMapping.
     * @return this assertion object.
     * @throws AssertionError if the actual MailTransfer's mailReceiverDownloadLinkMapping does not contain all given MailReceiverDownloadLinkMapping elements.
     */
    public S hasMailReceiverDownloadLinkMapping(java.util.Collection<? extends MailReceiverDownloadLinkMapping> mailReceiverDownloadLinkMapping) {
        // check that actual MailTransfer we want to make assertions on is not null.
        isNotNull();

        // check that given MailReceiverDownloadLinkMapping collection is not null.
        if (mailReceiverDownloadLinkMapping == null) {
            failWithMessage("Expecting mailReceiverDownloadLinkMapping parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getMailReceiverDownloadLinkMapping(), mailReceiverDownloadLinkMapping.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual MailTransfer's mailReceiverDownloadLinkMapping contains <b>only</b> the given MailReceiverDownloadLinkMapping elements and nothing else in whatever order.
     *
     * @param mailReceiverDownloadLinkMapping the given elements that should be contained in actual MailTransfer's mailReceiverDownloadLinkMapping.
     * @return this assertion object.
     * @throws AssertionError if the actual MailTransfer's mailReceiverDownloadLinkMapping does not contain all given MailReceiverDownloadLinkMapping elements.
     */
    public S hasOnlyMailReceiverDownloadLinkMapping(MailReceiverDownloadLinkMapping... mailReceiverDownloadLinkMapping) {
        // check that actual MailTransfer we want to make assertions on is not null.
        isNotNull();

        // check that given MailReceiverDownloadLinkMapping varargs is not null.
        if (mailReceiverDownloadLinkMapping == null)
            failWithMessage("Expecting mailReceiverDownloadLinkMapping parameter not to be null.");

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getMailReceiverDownloadLinkMapping(), mailReceiverDownloadLinkMapping);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual MailTransfer's mailReceiverDownloadLinkMapping contains <b>only</b> the given MailReceiverDownloadLinkMapping elements in Collection and nothing else in whatever order.
     *
     * @param mailReceiverDownloadLinkMapping the given elements that should be contained in actual MailTransfer's mailReceiverDownloadLinkMapping.
     * @return this assertion object.
     * @throws AssertionError if the actual MailTransfer's mailReceiverDownloadLinkMapping does not contain all given MailReceiverDownloadLinkMapping elements.
     */
    public S hasOnlyMailReceiverDownloadLinkMapping(java.util.Collection<? extends MailReceiverDownloadLinkMapping> mailReceiverDownloadLinkMapping) {
        // check that actual MailTransfer we want to make assertions on is not null.
        isNotNull();

        // check that given MailReceiverDownloadLinkMapping collection is not null.
        if (mailReceiverDownloadLinkMapping == null) {
            failWithMessage("Expecting mailReceiverDownloadLinkMapping parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getMailReceiverDownloadLinkMapping(), mailReceiverDownloadLinkMapping.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual MailTransfer's mailReceiverDownloadLinkMapping does not contain the given MailReceiverDownloadLinkMapping elements.
     *
     * @param mailReceiverDownloadLinkMapping the given elements that should not be in actual MailTransfer's mailReceiverDownloadLinkMapping.
     * @return this assertion object.
     * @throws AssertionError if the actual MailTransfer's mailReceiverDownloadLinkMapping contains any given MailReceiverDownloadLinkMapping elements.
     */
    public S doesNotHaveMailReceiverDownloadLinkMapping(MailReceiverDownloadLinkMapping... mailReceiverDownloadLinkMapping) {
        // check that actual MailTransfer we want to make assertions on is not null.
        isNotNull();

        // check that given MailReceiverDownloadLinkMapping varargs is not null.
        if (mailReceiverDownloadLinkMapping == null)
            failWithMessage("Expecting mailReceiverDownloadLinkMapping parameter not to be null.");

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getMailReceiverDownloadLinkMapping(), mailReceiverDownloadLinkMapping);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual MailTransfer's mailReceiverDownloadLinkMapping does not contain the given MailReceiverDownloadLinkMapping elements in Collection.
     *
     * @param mailReceiverDownloadLinkMapping the given elements that should not be in actual MailTransfer's mailReceiverDownloadLinkMapping.
     * @return this assertion object.
     * @throws AssertionError if the actual MailTransfer's mailReceiverDownloadLinkMapping contains any given MailReceiverDownloadLinkMapping elements.
     */
    public S doesNotHaveMailReceiverDownloadLinkMapping(java.util.Collection<? extends MailReceiverDownloadLinkMapping> mailReceiverDownloadLinkMapping) {
        // check that actual MailTransfer we want to make assertions on is not null.
        isNotNull();

        // check that given MailReceiverDownloadLinkMapping collection is not null.
        if (mailReceiverDownloadLinkMapping == null) {
            failWithMessage("Expecting mailReceiverDownloadLinkMapping parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getMailReceiverDownloadLinkMapping(), mailReceiverDownloadLinkMapping.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual MailTransfer has no mailReceiverDownloadLinkMapping.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual MailTransfer's mailReceiverDownloadLinkMapping is not empty.
     */
    public S hasNoMailReceiverDownloadLinkMapping() {
        // check that actual MailTransfer we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have mailReceiverDownloadLinkMapping but had :\n  <%s>";

        // check
        if (actual.getMailReceiverDownloadLinkMapping().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getMailReceiverDownloadLinkMapping());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual MailTransfer's mailSender is equal to the given one.
     *
     * @param mailSender the given mailSender to compare the actual MailTransfer's mailSender to.
     * @return this assertion object.
     * @throws AssertionError - if the actual MailTransfer's mailSender is not equal to the given one.
     */
    public S hasMailSender(String mailSender) {
        // check that actual MailTransfer we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting mailSender of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualMailSender = actual.getMailSender();
        if (!Objects.areEqual(actualMailSender, mailSender)) {
            failWithMessage(assertjErrorMessage, actual, mailSender, actualMailSender);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual MailTransfer's message is equal to the given one.
     *
     * @param message the given message to compare the actual MailTransfer's message to.
     * @return this assertion object.
     * @throws AssertionError - if the actual MailTransfer's message is not equal to the given one.
     */
    public S hasMessage(String message) {
        // check that actual MailTransfer we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting message of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualMessage = actual.getMessage();
        if (!Objects.areEqual(actualMessage, message)) {
            failWithMessage(assertjErrorMessage, actual, message, actualMessage);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual MailTransfer's state is equal to the given one.
     *
     * @param state the given state to compare the actual MailTransfer's state to.
     * @return this assertion object.
     * @throws AssertionError - if the actual MailTransfer's state is not equal to the given one.
     */
    public S hasState(MailTransfer.State state) {
        // check that actual MailTransfer we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting state of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        MailTransfer.State actualState = actual.getState();
        if (!Objects.areEqual(actualState, state)) {
            failWithMessage(assertjErrorMessage, actual, state, actualState);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual MailTransfer's title is equal to the given one.
     *
     * @param title the given title to compare the actual MailTransfer's title to.
     * @return this assertion object.
     * @throws AssertionError - if the actual MailTransfer's title is not equal to the given one.
     */
    public S hasTitle(String title) {
        // check that actual MailTransfer we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualTitle = actual.getTitle();
        if (!Objects.areEqual(actualTitle, title)) {
            failWithMessage(assertjErrorMessage, actual, title, actualTitle);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
