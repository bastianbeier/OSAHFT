# This workflow uses several third-party actions to build a Docker image
# for the osahft-api (backend, `./api`) and osahft-app (frontend), `./app`).
# If the build succeeds, it then pushes the built images to GitHub Packages Registry,
# and subsequently triggers deployment to the server.
#
# Third-party actions used:
# - actions/checkout@v2 | https://github.com/actions/checkout
# - docker/login-action@v1 | https://github.com/docker/build-push-action
# - ASzc/change-string-case-action@v1 | https://github.com/ASzc/change-string-case-action/
# - martinbeentjes/npm-get-version-action@master | https://github.com/martinbeentjes/npm-get-version-action
# - distributhor/workflow-webhook@v2 | https://github.com/distributhor/workflow-webhook

name: Build osahft and push docker images

on:
  workflow_dispatch:
  push:
    branches:
      - develop
env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: '${{ github.repository }}-api'
  IMAGE_NAME_APP: '${{ github.repository }}-app'

jobs:
#  apiSonarCloud:
#    name: Api SonarCloud Analysis
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: ./packages/api
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#      - name: Set up JDK 11
#        uses: actions/setup-java@v1
#        with:
#          java-version: 11
#      - name: Cache SonarCloud packages
#        uses: actions/cache@v1
#        with:
#          path: ~/.sonar/cache
#          key: ${{ runner.os }}-sonar
#          restore-keys: ${{ runner.os }}-sonar
#      - name: Cache Maven packages
#        uses: actions/cache@v1
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-m2
#      - name: Build and analyze
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectName=osahft_monorepo_api -Dsonar.projectKey=osahft_monorepo_api -Dsonar.qualitygate.wait=true
#
#  appSonarCloud:
#    name: App SonarCloud Analysis
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#      - name: SonarCloud Scan
#        uses: SonarSource/sonarcloud-github-action@master
#        with:
#          projectBaseDir: ./packages/app
#          args: >
#            -Dsonar.organization=osahft
#            -Dsonar.projectKey=osahft_monorepo_app
#            -Dsonar.sources=src/
#            -Dsonar.qualitygate.wait=true
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  buildApiDocker:
    name: Build osahft-api and push image
#    needs: [ApiSonarCloud]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    services:
      elasticsearch:
        image: elasticsearch:7.14.2
        ports:
          - 9200:9200
        env:
          discovery.type: single-node
        options: >-
          --health-cmd="curl http://localhost:9200/_cluster/health"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get pom version
        id: api-version
        working-directory: ./packages/api
        run: >
          echo "::set-output name=current-version::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: '${{ env.REGISTRY }}'
          username: '${{ github.actor }}'
          password: '${{ secrets.GITHUB_TOKEN }}'

      - name: $IMAGE_NAME to lowercase
        id: string
        uses: ASzc/change-string-case-action@v1
        with:
          string: '${{env.IMAGE_NAME_API}}'

      - name: Build and push API Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./packages/api
          push: true
          tags: >-
            ${{ env.REGISTRY }}/${{ steps.string.outputs.lowercase }}:${{steps.api-version.outputs.current-version }}

  buildAppDocker:
    name: Build osahft-app and push image
#    needs: [AppSonarCloud]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get package version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master
        with:
          path: ./packages/app

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: '${{ env.REGISTRY }}'
          username: '${{ github.actor }}'
          password: '${{ secrets.GITHUB_TOKEN }}'

      - name: $IMAGE_NAME to lowercase
        id: string
        uses: ASzc/change-string-case-action@v1
        with:
          string: '${{env.IMAGE_NAME_APP}}'

      - name: Build and push APP Docker image
        uses: docker/build-push-action@v2
        with:
          build-args: --driver-opt env.BUILDKIT_STEP_LOG_MAX_SIZE=-1 --driver-opt env.BUILDKIT_STEP_LOG_MAX_SPEED=-1
          context: ./packages/app
          push: true
          tags: >-
            ${{ env.REGISTRY }}/${{ steps.string.outputs.lowercase }}:${{steps.package-version.outputs.current-version}}-SNAPSHOT

  deployToServer:
    name: Trigger deployment to server
    needs: [buildApiDocker, buildAppDocker]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Generate timestamp for hook payload
        id: timestamp
        run: |
          echo "::set-output name=timestamp::$(date +'%Y-%m-%d_%H-%M-%S')"

      - name: Invoke deployment hook
        uses: distributhor/workflow-webhook@v2
        env:
          webhook_type: json-extended
          webhook_url: '${{ secrets.WEBHOOK_URL }}'
          webhook_secret: '${{ secrets.WEBHOOK_SECRET }}'
          data: '{ "timestamp": "${{ steps.timestamp.outputs.timestamp }}" }'
